{"python":"class Solution(object):\n    def permuteUnique(self, nums):\n        ans = []\n        self.dfs(nums, 0, [], ans)\n        return ans\n    \n    def dfs(self, nums, start, cur, ret):\n        if start == len(nums):\n            ret.append(list(cur))\n            return\n        for i in range(len(cur)+1):\n            self.dfs(nums, start+1, cur[:i]+[nums[start]]+cur[i:], ret)\n            if i < len(cur) and cur[i] == nums[start]:\n                break\n","java":"class Solution {\npublic List<List<Integer>> permuteUnique(int[] nums) {\n    List<List<Integer>> list = new ArrayList<>();\n    Arrays.sort(nums);\n    backtrack(list, new ArrayList<>(), nums, new boolean[nums.length]);\n    return list;\n}\n\nprivate void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums, boolean [] used){\n    if(tempList.size() == nums.length){\n        list.add(new ArrayList<>(tempList));\n    } else{\n        for(int i = 0; i < nums.length; i++){\n            if(used[i] || i > 0 && nums[i] == nums[i-1] && used[i - 1]) continue;\n            used[i] = true; \n            tempList.add(nums[i]);\n            backtrack(list, tempList, nums, used);\n            used[i] = false; \n            tempList.remove(tempList.size() - 1);\n        }\n    }\n}\n}"}