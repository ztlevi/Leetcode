{"java":"class Solution {\n    int maxLen = 0;\n    public int longestIncreasingPath(int[][] matrix) {\n        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;\n        int m = matrix.length, n = matrix[0].length;\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                dfs(matrix, dp, i, j);\n            }\n        }\n        return maxLen;\n    }\n    public void dfs(int[][] matrix, int[][] dp, int x, int y){\n        if (dp[x][y] != 0) return;\n        int m = matrix.length, n = matrix[0].length;\n        int[][] dxy = {{1,0}, {-1,0}, {0,1}, {0,-1}};   \n        int max = 1;\n        for (int[] d : dxy) {\n            int nx = x + d[0], ny = y + d[1];\n            int len = 1;\n            if (nx >= 0 && nx < m && ny >= 0 && ny < n && matrix[x][y] < matrix[nx][ny]) {\n                dfs(matrix, dp, nx, ny);\n                len = 1 + dp[nx][ny];\n            }\n            max = Math.max(max, len);\n        }\n        dp[x][y] = max;\n        maxLen = Math.max(maxLen, max);\n    }\n}"}