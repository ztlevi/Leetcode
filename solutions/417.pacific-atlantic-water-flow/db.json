{"java":"class Solution {\n    public List<int[]> pacificAtlantic(int[][] matrix) {\n        List<int[]> ans = new ArrayList();\n\n        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){\n            return ans;\n        }\n        int m = matrix.length, n = matrix[0].length;\n        boolean[][] pacific = new boolean[m][n];\n        boolean[][] atlantic = new boolean[m][n];\n        \n        for (int i = 0; i < m; i++) {\n            dfs(matrix, pacific, Integer.MIN_VALUE, i, 0);\n            dfs(matrix, atlantic, Integer.MIN_VALUE, i, n-1);\n        }\n        for (int i = 0; i < n; i++) {\n            dfs(matrix, pacific, Integer.MIN_VALUE, 0, i);\n            dfs(matrix, atlantic, Integer.MIN_VALUE, m-1, i);\n        }\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (pacific[i][j] && atlantic[i][j])\n                    ans.add(new int[]{i, j});\n            }\n        }\n        return ans;\n    }\n    \n\n    public void dfs(int[][] matrix, boolean[][] visited, int height, int i, int j){\n        int m = matrix.length, n = matrix[0].length;\n        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || height > matrix[i][j])\n            return;\n        int[][] dxy = new int[][]{{0,1}, {0,-1}, {1, 0}, {-1, 0}};\n\n        visited[i][j] = true;\n        for (int[] d : dxy) {\n            dfs(matrix, visited, matrix[i][j], i + d[0], j + d[1]);\n        }\n    }\n}"}