{"java":"public class Solution {\n    ArrayList<String> result = new ArrayList();\n    int max = 0;\n    \n    public List<String> removeInvalidParentheses(String s) {\n        if (s.length() != 0) {\n            dfs(s, \"\", 0, 0);\n        }\n        \n        if (result.size() == 0) {\n            result.add(\"\");      \n        }\n        return result;\n    }\n\n    // countLeft used for count the left parenthesis\n    // maxString used to count the max possible result string\n    public void dfs(String left, String right, int countLeft, int maxString) {\n        if (left.length() == 0) {\n            if (countLeft == 0) {\n                max = (maxString > max) ? maxString : max;\n                if (max == maxString && !result.contains(right))\n                    result.add(right);\n            }\n            return;\n        }\n\n        if (left.charAt(0) == '(') {\n            // keep ( first, then drop\n            dfs(left.substring(1), right+\"(\", countLeft+1, maxString+1);\n            dfs(left.substring(1), right, countLeft, maxString);\n        } else if (left.charAt(0) == ')') {\n            if (countLeft > 0) {\n                dfs(left.substring(1), right+\")\", countLeft-1, maxString+1);\n            }\n            dfs(left.substring(1), right, countLeft, maxString);\n        } else {\n            char c = left.charAt(0);\n            dfs(left.substring(1), right+c, countLeft, maxString+1);\n        }\n    }\n}\n"}