{"java":"public class Solution {\n    public List<List<Integer>> palindromePairs(String[] words) {\n        int lens = words.length;\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        \n        if (lens == 0) return result;\n        \n        Map<String, Integer> map = new HashMap();\n        for (int i = 0; i < words.length; i++) {\n            map.put(words[i], i);\n        }\n\n        for (int i = 0; i < words.length; i++) {\n            String s = words[i];\n\n            // if s is palindrome, find \"\"\n            if (isPalindrome(s)) {\n                if (map.containsKey(\"\")) {\n                    int x = map.get(\"\");\n                    if (x != i) {\n                        List<Integer> list = new ArrayList();\n                        list.add(i);\n                        list.add(x);\n                        result.add(list);\n                        list = new ArrayList();\n                        list.add(x);\n                        list.add(i);\n                        result.add(list);\n                    }\n                }\n            }\n\n            String reverse = new StringBuilder(s).reverse().toString();\n            if (map.containsKey(reverse)) {\n                int x = map.get(reverse);\n                if (x != i) {\n                    List<Integer> list = new ArrayList();\n                    list.add(i);\n                    list.add(x);\n                    result.add(list);\n                }\n            }\n            \n            for (int j = 1; j <= s.length()-1; j++) {\n                String left = s.substring(0, j);\n                String right = s.substring(j, s.length());\n\n                // if left is palindrome, find the right part\n                if (isPalindrome(left)) {\n                    String rightReverse = new StringBuilder(right).reverse().toString();\n                    if (map.containsKey(rightReverse)) {\n                        int x = map.get(rightReverse);\n                        List<Integer> list = new ArrayList();\n                        list.add(x);\n                        list.add(i);\n                        result.add(list);\n                    }\n                }\n                \n                // if right is palindrome, find the left part\n                if (isPalindrome(right)) {\n                    String leftReverse = new StringBuilder(left).reverse().toString();\n                    if (map.containsKey(leftReverse)) {\n                        int x = map.get(leftReverse);\n                        List<Integer> list = new ArrayList();\n                        list.add(i);\n                        list.add(x);\n                        result.add(list);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n         \n        int start = 0;\n        int end = s.length() - 1;\n         \n        while (start < end) {\n            if (s.charAt(start) != s.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n         \n        return true;\n    }\n}"}