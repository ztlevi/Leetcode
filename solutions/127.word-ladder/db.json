{"python":"from collections import deque\n\n\nclass Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \n        def construct_dict(word_list):\n            d = {}\n            for word in word_list:\n                for i in range(len(word)):\n                    s = word[:i] + \"_\" + word[i+1:]\n                    d[s] = d.get(s, []) + [word]\n            return d\n            \n        def bfs_words(begin, end, dict_words):\n            queue, visited = deque([(begin, 1)]), set()\n            while queue:\n                word, steps = queue.popleft()\n                if word not in visited:\n                    visited.add(word)\n                    if word == end:\n                        return steps\n                    for i in range(len(word)):\n                        s = word[:i] + \"_\" + word[i+1:]\n                        neigh_words = dict_words.get(s, [])\n                        for neigh in neigh_words:\n                            if neigh not in visited:\n                                queue.append((neigh, steps + 1))\n            return 0\n        \n        d = construct_dict(wordList)\n        return bfs_words(beginWord, endWord, d)"}