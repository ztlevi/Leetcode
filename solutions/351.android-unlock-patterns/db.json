{"python":"class Solution(object):\n    def numberOfPatterns(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        skip = [[0] * 10 for _ in range(10)]\n        skip[1][3] = skip[3][1] = 2\n        skip[1][7] = skip[7][1] = 4\n        skip[3][9] = skip[9][3] = 6\n        skip[7][9] = skip[9][7] = 8\n        skip[1][9] = skip[9][1] = skip[2][8] = skip[8][2] = skip[3][7] = skip[7][3] = skip[4][6] = skip[6][4] = 5\n        vis = [False for _ in range(10)]\n\n        rst = 0\n\n        for i in range(m, n+1):\n            rst += self.DFS(vis, skip, 1, i-1) * 4 # 1, 3, 7, 9 are symmetrical\n            rst += self.DFS(vis, skip, 2, i-1) * 4 # 2, 4, 6, 8 are symmetrical\n            rst += self.DFS(vis, skip, 5, i-1)\n        return rst\n        \n    def DFS(self, vis, skip, cur, remain):\n        if remain < 0:\n            return 0\n        if remain == 0:\n            return 1\n        vis[cur] = True\n        rst = 0\n        for i in range(1, 10):\n            if not vis[i] and (skip[cur][i] == 0 or vis[skip[cur][i]]):\n                rst += self.DFS(vis, skip, i, remain - 1)\n                \n        vis[cur] = False # backtracking\n                \n        return rst\n    \n    "}