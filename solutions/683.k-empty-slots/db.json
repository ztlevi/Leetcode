{"java":"class Solution {\n    public int kEmptySlots(int[] flowers, int k) {\n        int[] days = new int[flowers.length + 1];\n        for (int i = 0; i < flowers.length; i++) days[flowers[i] - 1] = i + 1; // days[pos] = day\n\n        int left = 0, right = k + 1, res = Integer.MAX_VALUE;\n        for (int i = 0; right < flowers.length; i++) {\n            if (i == left) {\n                continue;\n            } else if (i == right) {\n                res = Math.min(res, Math.max(days[left], days[right]));\n                left = i;\n                right = i + k + 1;\n            } else if (days[i] < days[left] || days[i] < days[right]) {\n                left = i;\n                right = i + k + 1;\n            }\n        }\n        return res != Integer.MAX_VALUE ? res : -1;\n    }\n}","python":"class Solution:\n    def kEmptySlots(self, flowers, k):\n        \"\"\"\n        :type flowers: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        N = len(flowers)\n        pos = [] # idx : flower\n        for day, flower in enumerate(flowers, 1):\n            idx = bisect.bisect_left(pos, flower);\n            for j in pos[idx-(idx>0):idx+1]:\n                if abs(j-flower) == k+1:\n                    return day\n            pos.insert(idx, flower)\n        return -1"}