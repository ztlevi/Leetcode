{"java":"/**\r\n * Definition for a point.\r\n * class Point {\r\n *     int x;\r\n *     int y;\r\n *     Point() { x = 0; y = 0; }\r\n *     Point(int a, int b) { x = a; y = b; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int maxPoints(Point[] points) {\r\n        if(points.length == 0) return 0;\r\n        int ans = 1;\r\n\r\n        for(int i = 0; i < points.length-1; i++){\r\n            int max = 1;\r\n            Map<Double, Integer> m = new HashMap();\r\n            Map<Integer, Integer> vertical = new HashMap();\r\n            int samePoint = 0;\r\n            for(int j = i+1; j < points.length; j++){\r\n                if(points[i].x == points[j].x && points[i].y == points[j].y) {\r\n                    samePoint++;\r\n                    continue;\r\n                }\r\n                if(points[i].x == points[j].x){\r\n                    if(!vertical.containsKey(points[i].x)){\r\n                        vertical.put(points[i].x, 2);\r\n                    }\r\n                    else{\r\n                        vertical.put(points[i].x, vertical.get(points[i].x) + 1);\r\n                    }\r\n                    max = Math.max(max, vertical.get(points[i].x));\r\n                }else{\r\n                    double slope = (points[i].y == points[j].y)? 0 : (1.0*(points[i].y-points[j].y))/(points[i].x-points[j].x);     \r\n                    if(!m.containsKey(slope)){\r\n                        m.put(slope, 2);\r\n                    }else{\r\n                        m.put(slope, m.get(slope)+1);\r\n                    }\r\n                    max = Math.max(max, m.get(slope));\r\n                }\r\n            }\r\n            ans = Math.max(ans, max + samePoint);\r\n        }\r\n        return ans;\r\n    }\r\n\r\n}"}