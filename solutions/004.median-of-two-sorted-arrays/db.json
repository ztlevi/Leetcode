{"c++":"class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        if(nums1.size() == 0)\n            return static_cast<double>(nums2[(nums2.size())/2] + nums2[(nums2.size() - 1)/2])/2;\n        if(nums2.size()  == 0)\n            return static_cast<double>(nums1[(nums1.size())/2] + nums1[(nums1.size() - 1)/2])/2;\n\n        int ptr1 = 0; int ptr2 = 0; int counter = 0;\n        int mid = (nums1.size() + nums2.size())/2;\n        int mid2 = (nums1.size() + nums2.size() - 1)/2;\n        double median1, median2;\n\n        while(counter <= mid)\n        {\n            if((nums1[ptr1] <= nums2[ptr2] && ptr1 < nums1.size()) || ptr2 >= nums2.size()){\n                if(counter == mid2)\n                    median1 = nums1[ptr1];\n                if(counter == mid)\n                    median2 = nums1[ptr1];\n                ptr1++; counter++;\n            }\n            else if(ptr2 < nums2.size()){\n                if(counter == mid2)\n                    median1 = nums2[ptr2];\n                if(counter == mid)\n                    median2 = nums2[ptr2];\n                ptr2++; counter++;\n            }\n        }\n\n        double median = (median1 + median2)/2;\n        return median;\n    }\n};"}