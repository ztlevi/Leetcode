{"python":"class Solution:\n    def knightProbability(self, N, K, r, c):\n        \"\"\"\n        :type N: int\n        :type K: int\n        :type r: int\n        :type c: int\n        :rtype: float\n        \"\"\"\n        dp = [[0] * N for _ in range(N)]\n        dp[r][c] = 1\n        dlist = [(1, 2), (1, -2), (2, 1), (2, -1), (-1, 2), (-1, -2), (-2, 1), (-2, -1)]\n        for cnt in range(K):\n            next = [[0] * N for _ in range(N)]\n            for i in range(N):\n                for j in range(N):\n                    if (dp[i][j] >= 1):\n                        for dx, dy in dlist:\n                            x = dx + i\n                            y = dy + j\n                            if 0 <= x < N and 0 <= y < N:\n                                next[x][y] += dp[i][j]\n            dp = next\n            \n        hit = 0\n        for i in range(N):\n            for j in range(N):\n                hit += dp[i][j]\n        return hit / (8 ** K)\n                "}