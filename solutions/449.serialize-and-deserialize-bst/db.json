{"python":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n# import collections\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        if not root:\n            return []\n        rst = [str(root.val)]\n        queue = collections.deque([root])\n        while queue:\n            node = queue.popleft()\n            if node.left:\n                rst.append(str(node.left.val))\n                queue.append(node.left)\n            else:\n                rst.append(\"#\")\n                \n            if node.right:\n                rst.append(str(node.right.val))\n                queue.append(node.right)\n            else:\n                rst.append(\"#\")\n\n        return ' '.join(rst)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        if not data:\n            return None\n        vals = iter(data.split())\n        val = vals.next()\n        root = TreeNode(int(val))\n        queue = collections.deque([root])\n        while queue:\n            node = queue.popleft()\n            val = vals.next()\n            if val == '#':\n                node.left = None\n            else:\n                node.left = TreeNode(int(val))\n                queue.append(node.left)\n                \n            val = vals.next()\n            if val == '#':\n                node.right = None\n            else:\n                node.right = TreeNode(int(val))\n                queue.append(node.right)\n        return root\n\n# Your Codec object will be instantiated and called as such:\n# codec = Codec()\n# codec.deserialize(\"2 1 3\")\n#codec.deserialize(codec.serialize(root))\n"}