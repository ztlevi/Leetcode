{"java":"class Buckets {\r\n    int low;\r\n    int high;\r\n    public Buckets() {\r\n        low = -1;\r\n        high = -1;\r\n    }\r\n}\r\n\r\npublic class Solution {\r\n    //Solution 1: quick solution\r\n    // public int maximumGap(int[] nums) {\r\n    //     if(nums.length < 2) return 0;\r\n    //     Arrays.sort(nums);\r\n    //     int max = 0;\r\n    //     for(int i = 1; i < nums.length; i++) {\r\n    //         max = Math.max(Math.abs(nums[i]-nums[i-1]), max);\r\n    //     }\r\n    //     return max;\r\n    // }\r\n    \r\n    //Solution 2: buckets\r\n    public int maximumGap(int[] nums) {\r\n        if(nums.length < 2) return 0;\r\n        int max = nums[0], min = nums[0];\r\n        \r\n        Buckets[] buckets = new Buckets[nums.length + 1];\r\n        for(int i = 0; i < buckets.length; i++) {\r\n            buckets[i] = new Buckets();\r\n        }\r\n        \r\n        for(int i = 0; i < nums.length; i++) {\r\n            max = Math.max(max, nums[i]);\r\n            min = Math.min(min, nums[i]);\r\n        }\r\n        \r\n        double interval;\r\n        if(max == min) return 0;\r\n        else \r\n            interval = (double) nums.length/(max - min);\r\n\r\n        // put all nums' element into the buckets\r\n        for(int i = 0; i < nums.length; i++) {\r\n            int index = (int) Math.floor( (nums[i] - min) * interval);\r\n            if(buckets[index].low == -1) {\r\n                buckets[index].low = nums[i];\r\n                buckets[index].high = nums[i];\r\n            } else {\r\n                buckets[index].low = Math.min(nums[i], buckets[index].low);\r\n                buckets[index].high = Math.max(nums[i], buckets[index].high);\r\n            }\r\n        }\r\n\r\n        // search the max difference in all buckets\r\n        int maxDiff = 0, prev = buckets[0].high;\r\n        for(int i = 1; i < buckets.length; i++) {\r\n            if(buckets[i].low != -1) {\r\n                maxDiff = Math.max(maxDiff, buckets[i].low - prev);\r\n                prev = buckets[i].high;\r\n            }\r\n        }\r\n\r\n        return maxDiff;\r\n    }\r\n\r\n}"}