{"java":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n\tpublic ListNode findMid(ListNode head){\r\n\t\tListNode slow = head, fast = head.next;\r\n\t\twhile(fast != null && fast.next != null)\r\n\t\t{\r\n\t\t\tslow = slow.next;\r\n\t\t\tfast = fast.next.next;\r\n\t\t}\r\n\r\n\t\treturn slow;\r\n\t}\r\n\r\n\tpublic ListNode sortList(ListNode head){\r\n\t\tif(head == null || head.next == null) return head;\r\n\t\t\r\n\t\tListNode left = new ListNode(0), left2 = left;\r\n\t\tListNode right = new ListNode(0), right2 = right;\r\n\t\tListNode mid = new ListNode(0), mid2 = mid;\r\n\t\tint midValue = findMid(head).val;\r\n\t\t\r\n\t\twhile(head != null){\r\n\t\t\tif(head.val < midValue){\r\n\t\t\t\tleft.next = new ListNode(head.val);\r\n\t\t\t\tleft = left.next;\r\n\t\t\t}else if(head.val > midValue){\r\n\t\t\t\tright.next = new ListNode(head.val);\r\n\t\t\t\tright = right.next;\r\n\t\t\t}else{\r\n\t\t\t\tmid.next = new ListNode(head.val);\r\n\t\t\t\tmid = mid.next;\r\n\t\t\t}\r\n\t\t\thead = head.next;\r\n\t\t}\r\n\r\n\t\tleft = sortList(left2.next);\r\n\t\tright = sortList(right2.next);\r\n\t\tmid = mid2.next;\r\n\t\t\r\n\t\treturn merge(left, mid, right);\r\n\t}\r\n\r\n\tpublic ListNode merge(ListNode left, ListNode mid, ListNode right){\r\n\t\tListNode dummy = new ListNode(0);\r\n\t\tListNode ans = dummy;\r\n\t\twhile(left != null){\r\n\t\t\tdummy.next = new ListNode(left.val);\r\n\t\t\tleft = left.next;\r\n\t\t\tdummy = dummy.next;\r\n\t\t}\r\n\t\twhile(mid != null){\r\n\t\t\tdummy.next = new ListNode(mid.val);\r\n\t\t\tmid = mid.next;\r\n\t\t\tdummy = dummy.next;\r\n\t\t}\r\n\t\twhile(right != null){\r\n\t\t\tdummy.next = new ListNode(right.val);\r\n\t\t\tright = right.next;\r\n\t\t\tdummy = dummy.next;\r\n\t\t}\r\n\t\treturn ans.next;\r\n\t}\r\n}\r\n"}