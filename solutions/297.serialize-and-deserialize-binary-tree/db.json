{"python":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n        \n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        rst = []\n        if root:\n            rst.append(root.val)\n        else:\n            return rst\n        lastNodelist = [root]\n        nullCount = 0\n        while lastNodelist:\n            nodelist = []\n            for node in lastNodelist:\n                if node.left:\n                    rst.append(node.left.val)\n                    nodelist.append(node.left)\n                    nullCount = 0\n                else:\n                    rst.append(None)\n                    nullCount += 1\n\n                if node.right:\n                    rst.append(node.right.val)\n                    nodelist.append(node.right)\n                    nullCount = 0\n                else:\n                    rst.append(None)\n                    nullCount += 1\n\n            lastNodelist = nodelist\n\n        return rst[:-1*nullCount]\n        \n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n        \n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        lastNodelist = []\n        root = None\n        if data:\n            root = TreeNode(data[0])\n            lastNodelist.append(root)\n        else:\n            return None\n        dataLen = len(data)\n        idx = 1\n        while lastNodelist:\n            nodelist = []\n            for node in lastNodelist:\n                if idx < dataLen:\n                    if data[idx] != None:\n                        node.left = TreeNode(data[idx])\n                        nodelist.append(node.left)\n                else:\n                    break\n\n                idx += 1\n                if idx < dataLen:\n                    if data[idx] != None:\n                        node.right = TreeNode(data[idx])\n                        nodelist.append(node.right)\n                else:\n                    break\n                idx += 1\n            lastNodelist = nodelist\n        return root\n"}