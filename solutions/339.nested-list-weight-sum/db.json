{"java":"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * public interface NestedInteger {\r\n *\r\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     public boolean isInteger();\r\n *\r\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // Return null if this NestedInteger holds a nested list\r\n *     public Integer getInteger();\r\n *\r\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // Return null if this NestedInteger holds a single integer\r\n *     public List<NestedInteger> getList();\r\n * }\r\n */\r\npublic class Solution {\r\n    public int depthSum(List<NestedInteger> nestedList) {\r\n        return partDepthSum(nestedList, 1);\r\n    }\r\n\r\n    public int partDepthSum(List<NestedInteger> nestedList, int depth) {\r\n        if (nestedList == null || nestedList.size() == 0)\r\n            return 0;\r\n\r\n        int sum = 0;\r\n        for (NestedInteger ni : nestedList) {\r\n            if (ni.isInteger()) {\r\n                sum += depth * ni.getInteger();\r\n            } else {\r\n                sum += partDepthSum(ni.getList(), depth + 1);\r\n            }\r\n        }\r\n\r\n        return sum;\r\n    }\r\n}"}