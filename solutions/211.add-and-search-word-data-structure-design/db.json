{"python":"class TreeNode(object):\n    def __init__(self, c=None):\n        self.isword = False\n        self.children = {}\n        self.char = c\n\nclass WordDictionary(object):\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TreeNode()\n\n    def addWord(self, word):\n        \"\"\"\n        Adds a word into the data structure.\n        :type word: str\n        :rtype: void\n        \"\"\"\n        node = self.root\n        for c in word:\n            if not c in node.children:\n                node.children[c] = TreeNode(c)\n            node = node.children[c]\n        node.isword = True\n\n    def search(self, word):\n        \"\"\"\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\n        :type word: str\n        :rtype: bool\n        \"\"\"\n\n        def dfs(word, node):\n            c, word = word[0], word[1:]\n\n            if not word:\n                if c == '.':\n                    for child in node.children:\n                        if node.children[child].isword:\n                            return True\n                    return False\n                else:\n                    return c in node.children and node.children[c].isword\n\n            if c == '.':\n                for child in node.children:\n                    if dfs(word, node.children[child]):\n                        return True\n                return False\n            else:\n                if c in node.children:\n                    return dfs(word, node.children[c])\n                else:\n                    return False\n\n        return dfs(word, self.root)\n\n"}