{"java":"/**\r\n * Definition for binary tree\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\n\r\npublic class BSTIterator {\r\n    LinkedList<TreeNode> stack;\r\n    public BSTIterator(TreeNode root) {\r\n        stack = new LinkedList();\r\n        TreeNode curr = root;\r\n        while(curr != null) {\r\n            stack.push(curr);\r\n            curr = curr.left;\r\n        }\r\n    }\r\n\r\n    /** @return whether we have a next smallest number */\r\n    public boolean hasNext() {\r\n        return !stack.isEmpty();\r\n    }\r\n\r\n    /** @return the next smallest number */\r\n    public int next() {\r\n        TreeNode curr = stack.peek();\r\n        if (!stack.isEmpty() && stack.get(0).right != null){\r\n        \tTreeNode right = stack.get(0).right;\r\n        \tstack.pop();\r\n\t        while(right != null) {\r\n                stack.push(right);\r\n                right = right.left;\r\n            }\r\n        }else{\r\n        \tstack.pop();\r\n        }\r\n        return curr.val;\r\n    }\r\n    \r\n}\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = new BSTIterator(root);\r\n * while (i.hasNext()) v[f()] = i.next();\r\n */"}