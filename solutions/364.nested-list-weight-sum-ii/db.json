{"java":"/**\r\n * // This is the interface that allows for creating nested lists.\r\n * // You should not implement it, or speculate about its implementation\r\n * public interface NestedInteger {\r\n *     // Constructor initializes an empty nested list.\r\n *     public NestedInteger();\r\n *\r\n *     // Constructor initializes a single integer.\r\n *     public NestedInteger(int value);\r\n *\r\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\r\n *     public boolean isInteger();\r\n *\r\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\r\n *     // Return null if this NestedInteger holds a nested list\r\n *     public Integer getInteger();\r\n *\r\n *     // Set this NestedInteger to hold a single integer.\r\n *     public void setInteger(int value);\r\n *\r\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\r\n *     public void add(NestedInteger ni);\r\n *\r\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\r\n *     // Return null if this NestedInteger holds a single integer\r\n *     public List<NestedInteger> getList();\r\n * }\r\n */\r\npublic class Solution {\r\n    public int DFS(List<NestedInteger> nestedList, int lastSum) {\r\n        if (nestedList.isEmpty()) return 0;\r\n        \r\n        List<NestedInteger> levelList = new ArrayList<NestedInteger>();\r\n        int listSum = 0;\r\n\r\n        for (NestedInteger ni : nestedList) {\r\n            if (ni.isInteger()) {\r\n                lastSum += ni.getInteger();\r\n            } else {\r\n                levelList.addAll(ni.getList());\r\n            }\r\n        }\r\n\r\n        listSum += DFS(levelList, lastSum);\r\n        return listSum + lastSum;\r\n    }\r\n    public int depthSumInverse(List<NestedInteger> nestedList) {\r\n        return DFS(nestedList, 0);\r\n    }\r\n}"}