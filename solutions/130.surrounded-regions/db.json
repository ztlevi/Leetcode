{"python":"class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: void Do not return anything, modify board in-place instead.\n        \"\"\"\n        if not board or not board[0]:\n            return\n\n        m = len(board)\n        n = len(board[0])\n        ans = [['X'] * n for _ in range(m)]\n        for i in (0, m - 1):\n            for j in range(n):\n                self.fill(board, i, j, ans)\n        for i in range(1, m-1):\n            for j in (0, n - 1):\n                self.fill(board, i, j, ans)\n        \n        for i in range(m):\n            for j in range(n):\n                board[i][j] = ans[i][j]\n\n    def fill(self, board, x, y, ans):\n        m = len(board)\n        n = len(board[0])\n        if 0 <= x < m and 0 <= y < n and board[x][y] == 'O':\n            ans[x][y] = 'O'\n            board[x][y] = 'X'\n            for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:\n                nx = x + dx\n                ny = y + dy\n                self.fill(board, nx, ny, ans)\n\n# so = Solution()\n# so.solve([[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]])"}