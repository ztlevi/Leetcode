{"java":"class Solution {\n    \tpublic int maximalRectangle(char[][] matrix) {\n        int m = matrix.length;\n        int n = (m == 0) ? 0 : matrix[0].length;\n        int[][] height = new int[m][n+1];\n\n        int maxArea = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0 ; j < n; j++) {\n                if (matrix[i][j] == '0') {\n                    height[i][j] = 0;\n                } else {\n                    height[i][j] = (i == 0) ? 1 : height[i-1][j]+1;\n                }\n            }\n        }\n        \n        // height[][] one more colum\n        // 1 0 1 0 0 0\n        // 2 0 2 1 1 0\n        // 3 1 3 2 2 0\n        // 4 0 0 3 0 0\n        for (int i = 0; i < m; i++) {\n            int area = maxAreaInHist(height[i]);\n            if (area > maxArea) {\n                maxArea = area;\n            }\n        }\n\n        return maxArea;\n\t}\n\t\n\t    private int maxAreaInHist(int[] height) {\n        LinkedList<Integer> stack = new LinkedList();\n        int i = 0; int max = 0;\n\n        // for 3, 1, 3, 2, 2, 0. \n        // calculate max when pop()\n        // push(3), pop(), push(1), push(3), pop(), push(2), push(2), pop(), push(0).\n        while (i < height.length) {\n            if (stack.isEmpty() || height[stack.peek()] <= height[i]) {\n                stack.push(i);\n                i++;\n            } else {\n                int t = stack.pop();\n                int width = stack.isEmpty() ? i : (i - stack.peek() -1);\n                max = Math.max(max, height[t] * width);\n            }\n        }\n\n        return max;\n    }\n\n};"}