{"python":"import heapq\n\nclass LFUCache(object):\n\n    def __init__(self, capacity):\n        \"\"\"\n        :type capacity: int\n        \"\"\"\n        self.capacity = capacity\n        self.n = 0\n        self.time = 0\n\n        self.map = {} # key :\n        self.freq_time = {} # key : (freq, time)\n        # store the cache that are used later\n        self.update = {} # key : (freq, time)\n        # use priority queue to store the least frequeuntly used cache ordered by freq and then time\n        self.priority_queue = [] # (freq, time, key)\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        if self.capacity <= 0:\n            return -1\n\n        self.time += 1\n        if key in self.map:\n            freq, _ = self.freq_time[key]\n            self.freq_time[key] = (freq + 1, self.time)\n            self.update[key] = self.freq_time[key]\n            return self.map[key]\n        else:\n            return -1\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: void\n        \"\"\"\n        if self.capacity <= 0:\n            return\n\n        self.time += 1\n        if key in self.map:\n            freq, _ = self.freq_time[key]\n            self.freq_time[key] = (freq + 1, self.time)\n            self.update[key] = self.freq_time[key]\n            self.map[key] = value\n        else:\n            if self.n < self.capacity:\n                self.n += 1\n            else:\n                # update the caches in the update map\n                # find the next one that has not been updated, which is the least frequently used\n                while self.priority_queue and self.priority_queue[0][2] in self.update:\n                    _, _, k = heapq.heappop(self.priority_queue)\n                    heapq.heappush(self.priority_queue, self.update[k] + (k,))\n                    del self.update[k]\n\n                _, _, k = heapq.heappop(self.priority_queue)\n                self.map.pop(k)\n                self.freq_time.pop(k)\n\n            self.map[key] = value\n            self.freq_time[key] = (0, self.time)\n            heapq.heappush(self.priority_queue, (0, self.time, key))\n\n# Your LFUCache object will be instantiated and called as such:\n# obj = LFUCache(3)\n# rst = []\n# obj.put(2, 2)\n# obj.put(1, 1)\n# rst.append(obj.get(1))\n# rst.append(obj.get(2))\n# obj.put(3, 3)\n# obj.put(4, 4)\n# rst.append(obj.get(3))\n# rst.append(obj.get(2))\n"}