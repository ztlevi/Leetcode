{"python":"class TreeNode(object):\r\n    def __init__(self, c = None):\r\n        self.isword = False\r\n        self.children = {}\r\n        self.char = c\r\n        \r\nclass Trie(object):\r\n        \r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        self.root = TreeNode()\r\n\r\n    def insert(self, word):\r\n        \"\"\"\r\n        Inserts a word into the trie.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        node = self.root\r\n        for c in word:\r\n            if not c in node.children.keys():\r\n                node.children[c] = TreeNode(c)\r\n            node = node.children[c]\r\n        node.isword = True\r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the trie.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        node = self.root\r\n        for c in word:\r\n            if not node.children:\r\n                return False\r\n            elif not c in node.children.keys():\r\n                return False\r\n            else:\r\n                node = node.children[c]\r\n        if node.isword == True:\r\n            return True\r\n        else:\r\n            return False\r\n                \r\n\r\n    def startsWith(self, prefix):\r\n        \"\"\"\r\n        Returns if there is any word in the trie that starts with the given prefix.\r\n        :type prefix: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        node = self.root\r\n        for c in prefix:\r\n            if not node.children or not c in node.children.keys():\r\n                return False\r\n            else:\r\n                node = node.children[c]\r\n        return True\r\n        \r\n\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.startsWith(prefix)"}