{"python":"class Solution:\n    def accountsMerge(self, accounts):\n        \"\"\"\n        :type accounts: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        visited_accounts = [False] * len(accounts)\n        emails_accounts_map = collections.defaultdict(list) # email : [account_id]\n        res = []\n         \n        # Build up the graph\n        for i, account in enumerate(accounts):\n            name = account[0]\n            for j in range(1, len(account)):\n                email = account[j]\n                emails_accounts_map[email].append(i)\n                \n        # DFS\n        def dfs(i, emails):\n            if visited_accounts[i]:\n                return\n            visited_accounts[i] = True\n            for j in range(1, len(accounts[i])):\n                email = accounts[i][j]\n                emails.add(email)\n                for neighbour in emails_accounts_map[email]:\n                    dfs(neighbour, emails)\n        \n        for i, account in enumerate(accounts):\n            if visited_accounts[i]:\n                continue\n            name, emails = account[0], set()\n            dfs(i, emails)\n            res.append([name] + list(sorted(emails)))\n        return res"}