{"java":"class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n        int n = nums.length;\n        int min = 0, max = 0;\n        for (int i = 0; i < n; i++) {\n            min = Math.min(nums[i], min);\n            max = Math.max(nums[i], max);\n        }\n        int[] tree = new int[max - min + 2];\n        List<Integer> ans = new ArrayList();\n\n        for (int i = n - 1; i >= 0; i--) {\n            int x = get(tree, nums[i] - min);\n            ans.add(x);\n            update(tree, nums[i] - min + 1);\n        }\n\n        Collections.reverse(ans);\n        return ans;\n    }\n\n    public void update(int[] tree, int n) {\n        for (int i = n; i < tree.length; i += i & (-i)) {\n            tree[i] += 1;\n        }\n    }\n\n    public int get(int[] tree, int n) {\n        int sum = 0;\n        for (int i = n; i > 0; i -= i & (-i)) {\n            sum += tree[i];\n        }\n        return sum;\n    }\n}","python":"class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        mx = max(nums)\n        mi = min(nums)\n\n        res = [0] * len(nums)\n        idx = len(nums) - 1\n        tree = [0] * (mx - mi + 2)\n        for i in range(len(nums)-1, -1, -1):\n            n = nums[i]\n            res[idx] = self.getCount(n - mi, tree)\n            idx -= 1\n            self.update(n - mi+1, tree)\n        return res\n\n    def getCount(self, n, tree):\n        cnt = 0\n        while n > 0:\n            cnt += tree[n]\n            n -= n & (-n)\n        return cnt\n\n    def update(self, n, tree):\n        while n < len(tree):\n            tree[n] += 1\n            n += n & (-n)\n\n# so = Solution()\n# print(so.countSmaller([5,2,1,6]))"}