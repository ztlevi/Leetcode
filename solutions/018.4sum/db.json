{"java":"import java.util.*;\n\nclass Solution {\n\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        Arrays.sort(nums);\n        List<List<Integer>> results = new ArrayList();\n\n        findNum(nums, 0, target, 4, new ArrayList<Integer>(), results);\n        return results;\n    }\n\n    public void findNum(int[] nums, int start, int target, int N, List<Integer> cur, List<List<Integer>> results) {\n        if (nums.length < N || N < 2) return;\n\n        if (N == 2) {\n            TwoSum(nums, start, target, cur, results);\n        } else {\n            for (int i = start; i < nums.length - N + 1; i++) {\n                if (target < nums[i] * N || target > nums[nums.length-1] * N) {\n                    break;\n                }\n                if (i == start || (i > start && nums[i-1] != nums[i])){\n                    cur.add(nums[i]);\n                    findNum(nums, i + 1, target - nums[i], N - 1, cur, results);\n                    cur.remove(cur.size() - 1);\n                }\n            }\n        }\n    }\n\n    public void TwoSum(int[] nums, int start, int target, List<Integer> cur, List<List<Integer>> results) {\n        int left = start, right = nums.length - 1;\n        while (left < right) {\n            if (nums[left] + nums[right] > target) {\n                right--;\n            } else if (nums[left] + nums[right] < target) {\n                left++;\n            } else if (nums[left] + nums[right] == target) {\n                List<Integer> ans = new ArrayList(cur);\n                ans.add(nums[left]);\n                ans.add(nums[right]);\n                results.add(ans);\n                left++; right--;\n                while (left < right && nums[left] == nums[left-1]) {\n                    left++;\n                }\n                while (left < right && nums[right] == nums[right+1]) {\n                    right--;\n                }\n            }\n        }\n    }\n\n}"}