{"python":"class MyQueue(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.input = []\n        self.output = []\n\n    def push(self, x):\n        \"\"\"\n        Push element x to the back of queue.\n        :type x: int\n        :rtype: void\n        \"\"\"\n        self.input.append(x)\n\n    def pop(self):\n        \"\"\"\n        Removes the element from in front of queue and returns that element.\n        :rtype: int\n        \"\"\"\n        if self.output:\n            return self.output.pop()\n        self.move()\n        return self.output.pop() if self.output else -1\n\n    def peek(self):\n        \"\"\"\n        Get the front element.\n        :rtype: int\n        \"\"\"\n        if self.output:\n            return self.output[-1]\n        self.move()\n        return self.output[-1] if self.output else -1\n\n    def empty(self):\n        \"\"\"\n        Returns whether the queue is empty.\n        :rtype: bool\n        \"\"\"\n        if len(self.input) or len(self.output):\n            return False\n        else: return True\n        \n    def move(self):\n        while self.input:\n            self.output.append(self.input.pop()) \n\n\n# Your MyQueue object will be instantiated and called as such:\n# obj = MyQueue()\n# obj.push(x)\n# param_2 = obj.pop()\n# param_3 = obj.peek()\n# param_4 = obj.empty()"}