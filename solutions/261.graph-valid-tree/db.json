{"java":"class Solution {\n    public boolean validTree(int n, int[][] edges) {\n        if (edges.length != n-1) return false;\n        Map<Integer, List<Integer>> tree = new HashMap(); // tree[parent node] : children node list\n        for (int i = 0; i < n; i++) {\n            tree.put(i, new ArrayList<Integer>());\n        }\n        for (int[] edge : edges) {\n            tree.get(edge[0]).add(edge[1]);\n            tree.get(edge[1]).add(edge[0]);\n        }\n        Queue<Integer> q = new LinkedList();\n        q.add(0);\n\n        while (!q.isEmpty()) {\n            int node = q.poll();\n            if (tree.containsKey(node)) {\n                for (int succ : tree.get(node)){\n                    q.offer(succ);\n                }\n                tree.remove(node);\n            }\n        }\n\n        return tree.size() == 0;\n    }\n}","python":"class Solution(object):\n    def validTree(self, n, edges):\n        if len(edges) != n - 1:\n            return False\n        neighbors = {i: [] for i in range(n)}\n        for v, w in edges:\n            neighbors[v] += w,\n            neighbors[w] += v,\n        def visit(v):\n            map(visit, neighbors.pop(v, []))\n        visit(0)\n        return not neighbors"}