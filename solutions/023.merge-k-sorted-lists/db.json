{"java":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode mergeKLists(ListNode[] lists) {\r\n        if (lists.length == 0) return null;\r\n        \r\n        List<ListNode> list = new ArrayList();\r\n        list.addAll(Arrays.asList(lists));\r\n        while (list.size() > 1) {\r\n            List<ListNode> newList = new ArrayList();\r\n            for (int i = 0; i < list.size()-1; i += 2) {\r\n                ListNode mergedList = merge2Lists(list.get(i), list.get(i+1));\r\n                newList.add(mergedList);\r\n            }\r\n            if (list.size() % 2 == 1) \r\n                newList.add(list.get(list.size()-1));\r\n            list = newList;\r\n        } \r\n        return list.get(0);\r\n    }\r\n    \r\n    public ListNode merge2Lists(ListNode l1, ListNode l2) {\r\n        ListNode current = new ListNode(0), dummy = current;\r\n\r\n        while (l1 != null && l2 != null) {\r\n            if (l1.val < l2.val) {\r\n                current.next = new ListNode(l1.val);\r\n                l1 = l1.next;\r\n                current = current.next;\r\n            } else {\r\n                current.next = new ListNode(l2.val);\r\n                l2 = l2.next;\r\n                current = current.next;\r\n            }\r\n        }\r\n        if (l1 != null) current.next = l1;\r\n        else current.next = l2;\r\n        \r\n        return dummy.next;\r\n    }\r\n}"}