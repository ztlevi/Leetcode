{"python":"class Solution:\n    def maxVacationDays(self, flights, days):\n        \"\"\"\n        :type flights: List[List[int]]\n        :type days: List[List[int]]\n        :rtype: int\n        \"\"\"\n        N = len(flights)\n        K = len(days[0])\n        \n        dp = [float('-inf')] * N\n        dp[0] = 0\n        # i week\n        # j : to city\n        # k : from city\n        for i in range(K):\n            new = [float('-inf')] * N\n            for j in range(N):\n                for k in range(N):\n                    if (flights[k][j] == 1 or j == k):\n                        new[j] = max(new[j], dp[k] + days[j][i])\n                        \n            dp = new\n        return max(dp)","java":"class Solution {\n    public int maxVacationDays(int[][] flights, int[][] days) {\n        // corner case\n\n\n        int N = flights.length, K = days[0].length;\n        int[] dp = new int[N]; // dp[i][j] is max days on week i at city j\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < K; i++) {\n            int[] temp = new int[N];\n            Arrays.fill(temp, Integer.MIN_VALUE);\n            for (int j = 0; j < N; j++) {\n                for (int k = 0; k < N; k++) {\n                    if (j == k || flights[k][j] == 1 ) {\n                        temp[j] = Math.max(temp[j], dp[k] + days[j][i]);\n                    }\n                }\n            }\n            dp = temp;\n        }\n        int mx = 0;\n        for (int v : dp) {\n            mx = Math.max(mx, v);\n        }\n        return mx;\n    }\n}"}